on:
  push:
    tags:
      - 'v*'

name: Create Release and Update RELEASE.md

permissions:
  contents: write

jobs:
  publish-to-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: npm
      - run: npm i -g npm
      - run: npm ci
      - run: npm publish

  update-release-md:
    name: Update RELEASE.md
    runs-on: ubuntu-latest
    needs: publish-to-npm
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Generate RELEASE.md from Tag PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          import os, subprocess, json
          from datetime import date

          token = os.environ['GITHUB_TOKEN']
          tag = os.environ['RELEASE_TAG']
          repo = os.environ['REPO']

          # Önceki tag'ı al
          try:
              prev_tag = subprocess.check_output(
                  ["git", "describe", "--tags", "--abbrev=0", f"{tag}^"],
                  text=True
              ).strip()
          except subprocess.CalledProcessError:
              prev_tag = None

          # Tag aralığındaki commit hash'lerini al
          if prev_tag:
              commits = subprocess.check_output(
                  ["git", "log", f"{prev_tag}..{tag}", "--pretty=format:%H"],
                  text=True
              ).splitlines()
          else:
              commits = subprocess.check_output(
                  ["git", "log", tag, "--pretty=format:%H"],
                  text=True
              ).splitlines()

          # Her commit için PR bul
          pr_list = []
          for c in commits:
              result = subprocess.run(
                  ["gh", "pr", "list", "--state", "merged", "--json", "number,title,labels,mergeCommit", "--limit", "100"],
                  capture_output=True, text=True
              )
              prs = json.loads(result.stdout)
              for pr in prs:
                  if pr["mergeCommit"]["oid"] in commits:
                      pr_list.append(pr)

          # Kategoriler
          categories = {
              "New Features": ["feature", "enhancement", "new-feature"],
              "Bug Fixes": ["bug", "bugfix", "fix"],
              "Notes": ["documentation", "notes", "improvement", "refactor"],
              "Other Changes": ["*"]
          }

          # Markdown oluştur
          output = f"# Release {tag}\n\n| Section | Description |\n|---|---|\n"
          today = date.today().isoformat()
          output += f"| **Date** | {today} |\n"

          for title, labels in categories.items():
              section_prs = []
              for pr in pr_list:
                  pr_labels = [l["name"].lower() for l in pr.get("labels", [])]
                  if any(l in pr_labels for l in labels) or "*" in labels:
                      section_prs.append(f"- {pr['title']} (#{pr['number']})")
              if section_prs:
                  output += f"| **{title}** | {'<br>'.join(section_prs)} |\n"

          with open("RELEASE.md", "a") as f:
              f.write(output)

      - name: Commit updated RELEASE.md
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add RELEASE.md
          git commit -m "Update RELEASE.md for ${{ github.ref_name }}"
          git push

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: update-release-md
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        run: gh release create ${{ github.ref }} --notes-file RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
